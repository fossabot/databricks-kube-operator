use schemars::JsonSchema;
/*
 * Git Credentials API
 *
 * The Git credentials API allows users to manage their [Git credentials](https://docs.databricks.com/repos.html#configure-your-git-integration-with-databricks) to use [Databricks Repos](https://docs.databricks.com/repos.html).
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetCredentialResponse {
    /// ID of the credential object in the workspace.
    #[serde(rename = "credential_id", skip_serializing_if = "Option::is_none")]
    pub credential_id: Option<i64>,
    /// Git username.
    #[serde(rename = "git_username", skip_serializing_if = "Option::is_none")]
    pub git_username: Option<String>,
    /// Git provider. This field is case-insensitive. The available Git providers are awsCodeCommit, azureDevOpsServices, bitbucketCloud, bitbucketServer, gitHub, gitHubEnterprise, gitLab, and gitLabEnterpriseEdition.
    #[serde(rename = "git_provider", skip_serializing_if = "Option::is_none")]
    pub git_provider: Option<String>,
}

impl GetCredentialResponse {
    pub fn new() -> GetCredentialResponse {
        GetCredentialResponse {
            credential_id: None,
            git_username: None,
            git_provider: None,
        }
    }
}


